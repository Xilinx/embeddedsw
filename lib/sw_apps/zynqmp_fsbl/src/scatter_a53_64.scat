#! armclang --target=arm-arm-nonie-eabi -march=armv8-a -E -x c

#define PSU_OCM_0_MEM_START	0xFFFC0000
#define PSU_OCM_0_MEM_LENGTH	0x39CC0

#define ROM_SECTION_LENGTH	0x00022000
#define ROM_SECTION_START	PSU_OCM_0_MEM_START
#define BSS_SECTION_LENGTH	0x00003000
#define DATA_SECTION_LENGTH	0x00001000
#define DUP_DATA_SECTION_LENGTH	0x00001000
#define BSS_SECTION_START_OFFSET	0
#define DATA_SECTION_START_OFFSET	0
#define HEAP_SECTION_LENGTH	0x400
#define HEAP_SECTION_START_OFFSET	0
#define DUP_DATA_SECTION_START_OFFSET	0
#define STACK_SECTION_LENGTH	0x2000
#define STACK_SECTION_START	(ROM_SECTION_START + ROM_SECTION_LENGTH + DATA_SECTION_LENGTH + DUP_DATA_SECTION_LENGTH + BSS_SECTION_LENGTH + HEAP_SECTION_LENGTH + STACK_SECTION_LENGTH)
#define ATF_BUFFER_LENGTH	0x200
#define BITSTREAN_BUFFER_LENGTH 0xFDC0

PSU_OCM_0_MEM PSU_OCM_0_MEM_START FIXED PSU_OCM_0_MEM_LENGTH
{
    ROM_SECTION ROM_SECTION_START ROM_SECTION_LENGTH
    {
        asm_vectors.o (.vectors, +First)
        *(+RO)
    }


    DATA_SECTION +DATA_SECTION_START_OFFSET DATA_SECTION_LENGTH
    {
        *(+RW)
    }

    DUP_DATA_SECTION +DUP_DATA_SECTION_START_OFFSET DUP_DATA_SECTION_LENGTH
    {

    }

    BSS_SECTION +BSS_SECTION_START_OFFSET BSS_SECTION_LENGTH
    {
        *(.bss*)
    }

    ARM_LIB_HEAP +HEAP_SECTION_START_OFFSET EMPTY HEAP_SECTION_LENGTH
    {

    }

    ARM_LIB_STACK STACK_SECTION_START ALIGN 0x20 EMPTY -STACK_SECTION_LENGTH
    {

    }

    ATF_AND_BITSTREAM_BUFFER_SECTION +BSS_SECTION_START_OFFSET ATF_BUFFER_LENGTH + BITSTREAN_BUFFER_LENGTH
    {
        *(.bss.handoff_params, +First)
        *(.bss.bitstream_buffer)
    }

}
